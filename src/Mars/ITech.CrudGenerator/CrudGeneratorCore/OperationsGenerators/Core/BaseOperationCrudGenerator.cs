using System.Linq;
using System.Text;
using ITech.CrudGenerator.CrudGeneratorCore.Configurations.Operations.BuiltConfigurations;
using ITech.CrudGenerator.CrudGeneratorCore.Schemes.Entity;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Text;
using Scriban;
using Scriban.Runtime;

namespace ITech.CrudGenerator.CrudGeneratorCore.OperationsGenerators.Core;

internal abstract class BaseOperationCrudGenerator<TConfiguration> : BaseGenerator
    where TConfiguration : CqrsOperationWithoutReturnValueGeneratorConfiguration
{
    protected readonly CrudGeneratorScheme<TConfiguration> Scheme;
    protected readonly EntityScheme EntityScheme;
    public EndpointMap? EndpointMap { get; set; }

    protected BaseOperationCrudGenerator(
        GeneratorExecutionContext context,
        CrudGeneratorScheme<TConfiguration> scheme)
        : base(context,
            scheme.Configuration.GlobalConfiguration.AutogeneratedFileText,
            scheme.Configuration.GlobalConfiguration.NullableEnable)
    {
        Scheme = scheme;
        EntityScheme = scheme.EntityScheme;
    }

    protected override void WriteFile(string templatePath, object model, string className)
    {
        var template = ReadTemplate(templatePath);

        var baseProps = new ScriptObject();
        var usingNamespaces = new[] { Scheme.DbContextScheme.DbContextNamespace, EntityScheme.EntityNamespace }
            .Distinct()
            .Select(x => $"using {x};");
        baseProps.Import(new
        {
            EntityName = EntityScheme.EntityName.ToString(),
            PluralEntityName = EntityScheme.EntityName.PluralName,
            EntityNamespace = EntityScheme.EntityNamespace,
            BusinessLogicNamespace = Scheme.Configuration.OperationsSharedConfiguration.BusinessLogicNamespaceForOperation,
            EndpointNamespace = Scheme.Configuration.OperationsSharedConfiguration.EndpointsNamespaceForFeature,
            EntityTitle = EntityScheme.EntityTitle.ToString(),
            PluralEntityTitle = EntityScheme.EntityTitle.PluralTitle,
            DbContextName = Scheme.DbContextScheme.DbContextName,
            UsingNamespaces = string.Join("\n", usingNamespaces)
        });

        var customProps = new ScriptObject();
        customProps.Import(model);

        var context = new TemplateContext();
        context.PushGlobal(baseProps);
        context.PushGlobal(customProps);

        var sb = new StringBuilder();
        sb.AppendLine(AutogeneratedFileText);
        if (Scheme.Configuration.GlobalConfiguration.NullableEnable)
        {
            sb.AppendLine("#nullable enable");
        }

        sb.AppendLine(template.Render(context));

        var sourceCode = sb.ToString().Trim();

        var result = CSharpSyntaxTree.ParseText(SourceText.From(sourceCode, Encoding.UTF8))
            .GetRoot()
            .NormalizeWhitespace()
            .SyntaxTree
            .GetText();

        Context.AddSource($"{className}.g.cs", result);
    }
}

internal class EndpointMap
{
    public string EntityName { get; set; }
    public string EndpointNamespace { get; set; }
    public string HttpMethod { get; }
    public string EndpointRoute { get; set; }
    public string FunctionCall { get; set; }

    public EndpointMap(string entityName, string endpointNamespace, string httpMethod, string endpointRoute,
        string functionCall)
    {
        EntityName = entityName;
        EndpointNamespace = endpointNamespace;
        HttpMethod = httpMethod;
        EndpointRoute = endpointRoute;
        FunctionCall = functionCall;
    }
}