using ITech.Cqrs.Cqrs.Queries;
using ITech.Cqrs.Domain.Exceptions;
using Mapster;
using {{namespace}};

namespace {{preferred_namespace}}.Controllers;

public partial class Get{{entity_name}}Handler : IQueryHandler<{{command_name}}, {{dto_name}}>
{
    private readonly MarsDb _db;

    public Get{{entity_name}}Handler(MarsDb db) {
        _db = db;
    }

    public async Task<{{dto_name}}> HandleAsync({{command_name}} command, CancellationToken cancellation) {
        var entity = await _db.Set<{{entity_name}}>().FindAsync([{{find_properties}}], cancellation);
        if (entity == null) {
            throw new EfEntityNotFoundException(typeof({{entity_name}}));
        }
        
        var result = entity.Adapt<{{dto_name}}>();
        return result;
    }
}