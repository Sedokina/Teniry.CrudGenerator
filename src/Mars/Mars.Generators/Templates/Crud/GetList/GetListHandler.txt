using ITech.Cqrs.Cqrs.Queries;
using ITech.Cqrs.Domain.Exceptions;
using ITech.Cqrs.Queryables.Page;
using ITech.Cqrs.Queryables.Filter;
using Mapster;
using Microsoft.EntityFrameworkCore;
using {{entity_namespace}};
using {{db_context_namespace}};

namespace {{business_logic_namespace}};

public partial class {{handler_name}} : IQueryHandler<{{query_name}}, {{dto_name}}>
{
    private readonly {{db_context_name}} _db;

    public {{handler_name}}({{db_context_name}} db) {
        _db = db;
    }

    public async Task<{{dto_name}}> HandleAsync({{query_name}} query, CancellationToken cancellation) {
        var filter = query.Adapt<{{filter_name}}>();
        filter.Sorts = query.Sort;
        
        var result = await _db.Set<{{entity_name}}>()
            .Filter(filter)
            .ProjectToType<{{dto_list_item_name}}>()
            .ToPagedListAsync(query, cancellation);
            
        return new {{dto_name}}(result.ToList(), result.GetPage());
    }
}