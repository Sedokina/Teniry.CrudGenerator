using ITech.Cqrs.Cqrs.Queries;
using ITech.Cqrs.Domain.Exceptions;
using Mapster;
{{using_namespaces}}

namespace {{business_logic_namespace}};

public partial class {{handler_name}}: IQueryHandler<{{query_name}}, {{dto_name}}>
{
    private readonly {{db_context_name}} _db;

    public {{handler_name}}({{db_context_name}} db) {
        _db = db;
    }

    public async Task<{{dto_name}}> HandleAsync({{query_name}} query, CancellationToken cancellation) {
        var entity = await _db.Set<{{entity_name}}>().FindAsync([{{find_parameters}}], cancellation);
        if (entity == null) {
            throw new EfEntityNotFoundException(typeof({{entity_name}}));
        }
        
        var result = entity.Adapt<{{dto_name}}>();
        return result;
    }
}