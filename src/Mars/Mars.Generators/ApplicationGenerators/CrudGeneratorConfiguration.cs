using System.Collections.Generic;
using System.Linq;
using Mars.Generators.ApplicationGenerators.Core.EntitySchemaCore;
using Scriban;

namespace Mars.Generators.ApplicationGenerators;

public sealed class CrudGeneratorConfiguration
{
    public CrudGeneratorConfiguration()
    {
        InitDefault();
    }

    public string AutogeneratedFileText { get; set; } = null!;
    public bool NullableEnable { get; set; } = true;
    public string TemplatesBasePath { get; set; } = null!;
    public PutBusinessLogicIntoNamespaceConfiguration BusinessLogicNamespaceBasePath { get; set; } = null!;
    public PutEndpointsIntoNamespaceConfiguration EndpointsNamespaceBasePath { get; set; } = null!;
    public NameConfiguration FeatureNameConfiguration { get; set; } = null!;
    public CqrsWithReturnValueConfiguration CreateCommand { get; set; } = null!;
    public CqrsConfiguration DeleteCommand { get; set; } = null!;
    public CqrsConfiguration UpdateCommand { get; set; } = null!;
    public CqrsWithReturnValueConfiguration GetByIdQuery { get; set; } = null!;
    public CqrsListConfiguration GetListQuery { get; set; } = null!;

    private void InitDefault()
    {
        AutogeneratedFileText = @"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a crud generator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------";
        NullableEnable = true;
        TemplatesBasePath = "Mars.Generators.Templates.Crud";
        BusinessLogicNamespaceBasePath = new("{{assembly_name}}.Application.{{feature_name}}.{{function_name}}");
        EndpointsNamespaceBasePath = new("{{assembly_name}}.Endpoints.{{entity_name}}Endpoints");
        FeatureNameConfiguration = new("{{entity_name}}Feature");
        // TODO: use TemplatesBasePath not directly, but from {{ }} syntax
        // TODO: create operation name and move Create into it, than use like {{ }}
        // TODO: move function name from route configuration
        CreateCommand = new()
        {
            OperationType = CqrsOperationType.Command,
            FunctionName = new("Create{{entity_name}}"),
            Operation = new()
            {
                TemplatePath = $"{TemplatesBasePath}.Create.CreateCommand.txt",
                NameConfiguration = new("Create{{entity_name}}Command")
            },
            Dto = new()
            {
                TemplatePath = $"{TemplatesBasePath}.Create.CreatedDto.txt",
                NameConfiguration = new("Created{{entity_name}}Dto"),
            },
            Handler = new()
            {
                TemplatePath = $"{TemplatesBasePath}.Create.CreateHandler.txt",
                NameConfiguration = new("Create{{entity_name}}Handler"),
            },
            Endpoint = new()
            {
                TemplatePath = $"{TemplatesBasePath}.Create.CreateEndpoint.txt",
                NameConfiguration = new("Create{{entity_name}}Endpoint"),
                RouteConfiguration = new("/{{entity_name}}/create", "CreateAsync")
            }
        };
        DeleteCommand = new CqrsConfiguration
        {
            OperationType = CqrsOperationType.Command,
            FunctionName = new("Delete{{entity_name}}"),
            Operation = new()
            {
                TemplatePath = $"{TemplatesBasePath}.Delete.DeleteCommand.txt",
                NameConfiguration = new("Delete{{entity_name}}Command")
            },
            Handler = new()
            {
                TemplatePath = $"{TemplatesBasePath}.Delete.DeleteHandler.txt",
                NameConfiguration = new("Delete{{entity_name}}Handler"),
            },
            Endpoint = new()
            {
                TemplatePath = $"{TemplatesBasePath}.Delete.DeleteEndpoint.txt",
                NameConfiguration = new("Delete{{entity_name}}Endpoint"),
                RouteConfiguration = new("/{{entity_name}}/{{id_param_name}}/delete", "DeleteAsync")
            }
        };
        UpdateCommand = new CqrsConfiguration
        {
            OperationType = CqrsOperationType.Command,
            FunctionName = new("Update{{entity_name}}"),
            Operation = new()
            {
                TemplatePath = $"{TemplatesBasePath}.Update.UpdateCommand.txt",
                NameConfiguration = new("Update{{entity_name}}Command"),
            },
            Handler = new()
            {
                TemplatePath = $"{TemplatesBasePath}.Update.UpdateHandler.txt",
                NameConfiguration = new("Update{{entity_name}}Handler"),
            },
            Endpoint = new()
            {
                TemplatePath = $"{TemplatesBasePath}.Update.UpdateEndpoint.txt",
                NameConfiguration = new("Update{{entity_name}}Endpoint"),
                RouteConfiguration = new("/{{entity_name}}/{{id_param_name}}/update", "UpdateAsync")
            }
        };
        GetByIdQuery = new()
        {
            OperationType = CqrsOperationType.Query,
            FunctionName = new("Get{{entity_name}}"),
            Operation = new()
            {
                TemplatePath = $"{TemplatesBasePath}.GetById.GetByIdQuery.txt",
                NameConfiguration = new("Get{{entity_name}}Query")
            },
            Dto = new()
            {
                TemplatePath = $"{TemplatesBasePath}.GetById.GetByIdDto.txt",
                NameConfiguration = new("{{entity_name}}Dto"),
            },
            Handler = new()
            {
                TemplatePath = $"{TemplatesBasePath}.GetById.GetByIdHandler.txt",
                NameConfiguration = new("Get{{entity_name}}Handler"),
            },
            Endpoint = new()
            {
                TemplatePath = $"{TemplatesBasePath}.GetById.GetByIdEndpoint.txt",
                NameConfiguration = new("Get{{entity_name}}Endpoint"),
                RouteConfiguration = new("/{{entity_name}}/{{id_param_name}}", "GetAsync")
            }
        };
        GetListQuery = new()
        {
            OperationType = CqrsOperationType.Query,
            FunctionName = new("GetList{{entity_name}}"),
            Operation = new()
            {
                TemplatePath = $"{TemplatesBasePath}.GetList.GetListQuery.txt",
                NameConfiguration = new("Get{{plural_entity_name}}Query"),
            },
            Dto = new()
            {
                TemplatePath = $"{TemplatesBasePath}.GetList.GetListDto.txt",
                NameConfiguration = new("{{plural_entity_name}}Dto"),
            },
            DtoListItem = new()
            {
                TemplatePath = $"{TemplatesBasePath}.GetList.GetListItemDto.txt",
                NameConfiguration = new("{{plural_entity_name}}ListItemDto"),
            },
            Filter = new()
            {
                TemplatePath = $"{TemplatesBasePath}.GetList.GetListFilter.txt",
                NameConfiguration = new("Get{{plural_entity_name}}Filter"),
            },
            Handler = new()
            {
                TemplatePath = $"{TemplatesBasePath}.GetList.GetListHandler.txt",
                NameConfiguration = new("Get{{plural_entity_name}}Handler"),
            },
            Endpoint = new()
            {
                TemplatePath = $"{TemplatesBasePath}.GetList.GetListEndpoint.txt",
                NameConfiguration = new("Get{{plural_entity_name}}Endpoint"),
                RouteConfiguration = new("/{{entity_name}}", "GetAsync")
            }
        };
    }
}

/// <summary>
/// Available string keys in namespace path:<br/>
///  - {{assembly_name}} <br/>
///  - {{feature_name}}<br/>
///  - {{function_name}}<br/>
/// </summary>
public class PutBusinessLogicIntoNamespaceConfiguration(string namespacePath)
{
    public string GetNamespacePath(
        EntityName entityName,
        string assemblyName,
        NameConfiguration featureName,
        NameConfiguration functionNameConfiguration)
    {
        var putIntoNamespaceTemplate = Template.Parse(namespacePath);
        return putIntoNamespaceTemplate.Render(new
        {
            AssemblyName = assemblyName,
            FeatureName = featureName.GetName(entityName),
            FunctionName = functionNameConfiguration.GetName(entityName)
        });
    }
}

/// <summary>
/// Available string keys in namespace path:<br/>
///  - {{assembly_name}} <br/>
///  - {{feature_name}}<br/>
///  - {{function_name}}<br/>
/// </summary>
public class PutEndpointsIntoNamespaceConfiguration(string namespacePath)
{
    public string GetNamespacePath(
        EntityName entityName,
        string assemblyName)
    {
        var putIntoNamespaceTemplate = Template.Parse(namespacePath);
        return putIntoNamespaceTemplate.Render(new
        {
            AssemblyName = assemblyName,
            EntityName = entityName
        });
    }
}

/// <summary>
/// Available string in name:
///  - {{entity_name}}<br/>
/// </summary>
public class NameConfiguration(string name)
{
    public string GetName(EntityName entityName)
    {
        var putIntoNamespaceTemplate = Template.Parse(name);
        var model = new
        {
            EntityName = entityName.Name,
            PluralEntityName = entityName.PluralName
        };
        return putIntoNamespaceTemplate.Render(model);
    }
}

/// <summary>
/// Available string in name:
///  - {{entity_name}}<br/>
///  - {{id_param_name}}<br/>
/// </summary>
public class EndpointRouteConfiguration(string name, string functionName)
{
    public string FunctionName { get; } = functionName;

    public string GetRoute(string entityName, List<string>? idParams = null)
    {
        var putIntoNamespaceTemplate = Template.Parse(name);
        entityName = entityName.ToLower();

        if (idParams == null)
        {
            return putIntoNamespaceTemplate.Render(new { entityName });
        }

        var idParamName = string.Join("/", idParams.Select(x => $"{{{x}}}"));
        return putIntoNamespaceTemplate.Render(new { entityName, idParamName });
    }
}

public class CqrsConfiguration
{
    public CqrsOperationType OperationType { get; set; }
    public NameConfiguration FunctionName { get; set; }
    public CqrsTemplateConfiguration Operation { get; set; }
    public CqrsTemplateConfiguration Handler { get; set; }
    public MinimalApiEndpointConfiguration Endpoint { get; set; }
}

public class CqrsWithReturnValueConfiguration : CqrsConfiguration
{
    public CqrsTemplateConfiguration Dto { get; set; }
}

public class CqrsListConfiguration : CqrsWithReturnValueConfiguration
{
    public CqrsTemplateConfiguration Filter { get; set; }
    public CqrsTemplateConfiguration DtoListItem { get; set; }
}

public class CqrsTemplateConfiguration
{
    public string TemplatePath { get; set; } = null!;
    public NameConfiguration NameConfiguration { get; set; } = null!;

    // TODO: remove direct usage of entity name, get it from entity
    public string GetName(EntityName entityName)
    {
        return NameConfiguration.GetName(entityName);
    }
}

public class MinimalApiEndpointConfiguration
{
    public string TemplatePath { get; set; } = null!;
    public NameConfiguration NameConfiguration { get; set; } = null!;

    public EndpointRouteConfiguration RouteConfiguration { get; set; } = null!;

    // TODO: remove direct usage of entity name, get it from entity
    public string GetName(EntityName entityName)
    {
        return NameConfiguration.GetName(entityName);
    }
}

public enum CqrsOperationType
{
    Query,
    Command
}