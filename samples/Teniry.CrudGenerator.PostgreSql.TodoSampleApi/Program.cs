using System.Reflection;
using AutogeneratedEndpoints;
using Microsoft.EntityFrameworkCore;
using Teniry.Cqrs;
using Teniry.CrudGenerator.PostgreSql.TodoSampleApi;

var builder = WebApplication.CreateBuilder(args);

var connectionStringPostgres = builder.Configuration.GetConnectionString("DefaultConnection")
    ?? throw new InvalidOperationException("Connection string with name 'DefaultConnection' for PostgreSQL not found");

builder.Services.AddDbContext<TodoDb>(
    options =>
        options.UseNpgsql(connectionStringPostgres)
            .UseSnakeCaseNamingConvention()
            .EnableSensitiveDataLogging(builder.Environment.IsDevelopment())
);

// Add services to the container.
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(
    options => {
        // Add swagger documentation from an assembly xml file
        var xmlFilename = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
        options.IncludeXmlComments(Path.Combine(AppContext.BaseDirectory, xmlFilename));
    }
);

// This is required because generated code uses cqrs
builder.Services.AddCqrs();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment()) {
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

// This is required to get access to generated endpoints
app.MapGeneratedEndpoints();

app.Run();