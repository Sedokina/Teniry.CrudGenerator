using System.Reflection;
using AutogeneratedEndpoints;
using Microsoft.EntityFrameworkCore;
using MongoDB.Bson;
using MongoDB.Bson.Serialization;
using MongoDB.Bson.Serialization.Serializers;
using Teniry.Cqrs;
using Teniry.CrudGenerator.TodoSampleAPI;
using Teniry.CrudGenerator.TodoSampleAPI.Mongo;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
var connectionString = builder.Configuration.GetConnectionString("DefaultConnection")
    ?? throw new InvalidOperationException("Connection string with name 'DefaultConnection' for MongoDb not found");
var connectionStringDbName = builder.Configuration.GetConnectionString("DefaultConnectionDbName")
    ?? throw new InvalidOperationException(
        "Connection string with name 'DefaultConnectionDbName' for MongoDb not found"
    );

// For Guid to work with mongo db
BsonSerializer.RegisterSerializer(new GuidSerializer(GuidRepresentation.Standard));

builder.Services.AddDbContext<TodoDb>(options => options.UseMongoDB(connectionString, connectionStringDbName));

// This is required for endpoints to serialize ObjectId as string and deserialize string as ObjectId
builder.Services.ConfigureHttpJsonOptions(
    options => { options.SerializerOptions.Converters.Add(new MongoObjectIdJsonConverter()); }
);

builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(
    options => {
        // This is required for swagger shows ObjectId as string in endpoints
        options.SchemaFilter<MongoObjectIdSwaggerParameterFilter>();

        // Add swagger documentation from an assembly xml file
        var xmlFilename = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
        options.IncludeXmlComments(Path.Combine(AppContext.BaseDirectory, xmlFilename));
    }
);

// This is required because generated code uses cqrs
builder.Services.AddCqrs();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment()) {
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

// This is required to get access to generated endpoints
app.MapGeneratedEndpoints();

app.Run();