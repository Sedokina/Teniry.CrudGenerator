[  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a crud generator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using Teniry.Cqrs.Extended.Exceptions;

namespace Teniry.CrudGenerator.Tests.Application.TestEntityFeature.GetTestEntity;
/// <summary>
///     Get Test entity by id
/// </summary>
/// <returns>Returns full entity data of type <see cref = "TestEntityDto"/></returns>
/// <exception cref = "EntityNotFoundException">When Test entity entity does not exist</exception>
public partial class GetTestEntityQuery
{
    public int Id { get; set; }

    public GetTestEntityQuery(int id)
    {
        Id = id;
    }
}
  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a crud generator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using Teniry.Cqrs.Queries;
using Teniry.Cqrs.Extended.Exceptions;
using Teniry.CrudGenerator.Tests;
using Teniry.CrudGenerator.Tests;
using Mapster;

namespace Teniry.CrudGenerator.Tests.Application.TestEntityFeature.GetTestEntity;
public partial class GetTestEntityHandler : IQueryHandler<GetTestEntityQuery, TestEntityDto>
{
    private readonly TestDb _db;
    public GetTestEntityHandler(TestDb db)
    {
        _db = db;
    }

    /// <inheritdoc/>
    public async Task<TestEntityDto> HandleAsync(GetTestEntityQuery query, CancellationToken cancellation)
    {
        var entity = await _db.FindAsync<TestEntity>(new object[] { query.Id }, cancellation);
        if (entity == null)
        {
            throw new EntityNotFoundException(typeof(TestEntity));
        }

        return entity.Adapt<TestEntityDto>();
    }
}
  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a crud generator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Teniry.CrudGenerator.Tests.Application.TestEntityFeature.GetTestEntity;
public partial class TestEntityDto
{
    public int Id { get; set; }
    public string Name { get; set; } = "";
}
  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a crud generator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using Microsoft.AspNetCore.Mvc;
using Teniry.Cqrs.Queries;
using Teniry.CrudGenerator.Tests.Application.TestEntityFeature.GetTestEntity;

namespace Teniry.CrudGenerator.Tests.Endpoints.TestEntityEndpoints;
public static partial class GetTestEntityEndpoint
{
    /// <summary>
    ///     Get Test entity by id
    /// </summary>
    /// <response code="200">Returns full Test entity data</response>
    [ProducesResponseType(typeof(TestEntityDto), 200)]
    public static async Task<IResult> GetAsync(int id, IQueryDispatcher queryDispatcher, CancellationToken cancellation)
    {
        var query = new GetTestEntityQuery(id);
        var result = await queryDispatcher.DispatchAsync<GetTestEntityQuery, TestEntityDto>(query, cancellation);
        return TypedResults.Ok(result);
    }
}
  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a crud generator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using Teniry.Cqrs.Extended.Queryables.Page;
using Teniry.Cqrs.Extended.Queryables.Sort;

namespace Teniry.CrudGenerator.Tests.Application.TestEntityFeature.GetTestEntities;
/// <summary>
///     Get Test entities
/// </summary>
/// <returns>Returns Test entities of type <see cref = "TestEntitiesDto"/></returns>
public partial class GetTestEntitiesQuery : IDefineSortable, IPage
{
    public int[]? Ids { get; set; }
    public string? Name { get; set; }
    /// <inheritdoc/>
    public int Page { get; set; }
    /// <inheritdoc/>
    public int PageSize { get; set; }
    /// <inheritdoc/>
    public string[]? Sort { get; set; }

    /// <inheritdoc/>
    public string[] GetSortKeys()
    {
        return new string[]
        {
            "id",
            "name"
        };
    }
}
  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a crud generator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Teniry.CrudGenerator.Tests.Application.TestEntityFeature.GetTestEntities;
public partial class TestEntitiesListItemDto
{
    public int Id { get; set; }
    public string Name { get; set; } = "";
}
  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a crud generator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using Teniry.Cqrs.Extended.Queryables.Page;

namespace Teniry.CrudGenerator.Tests.Application.TestEntityFeature.GetTestEntities;
public partial class TestEntitiesDto : PagedResult<TestEntitiesListItemDto>
{
    public TestEntitiesDto(List<TestEntitiesListItemDto> items, PageInfo page) : base(items, page)
    {
    }
}
  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a crud generator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Linq.Expressions;
using Microsoft.EntityFrameworkCore;
using Teniry.Cqrs.Extended.Queryables.Filter;
using Teniry.CrudGenerator.Tests;

namespace Teniry.CrudGenerator.Tests.Application.TestEntityFeature.GetTestEntities;
public partial class GetTestEntitiesFilter : QueryableFilter<TestEntity>
{
    public int[]? Ids { get; set; }
    public string? Name { get; set; }

    /// <inheritdoc/>
    public override Dictionary<string, Expression<Func<TestEntity, object>>> DefineSort()
    {
        return new Dictionary<string, Expression<Func<TestEntity, object>>>
        {
            {
                "id",
                x => x.Id
            },
            {
                "name",
                x => x.Name
            },
        };
    }

    /// <inheritdoc/>
    protected override IQueryable<TestEntity> DefaultSort(IQueryable<TestEntity> query)
    {
        return base.DefaultSort(query);
    }

    /// <inheritdoc/>
    protected override IQueryable<TestEntity> Filter(IQueryable<TestEntity> query)
    {
        if (Ids is not null && Ids.Length > 0)
        {
            query = query.Where(x => Ids.Contains(x.Id));
        }

        if (Name is not null)
        {
            query = query.Where(x => x.Name.ToLower().Contains(Name.ToLower()));
        }

        return query;
    }
}
  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a crud generator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using Microsoft.EntityFrameworkCore;
using Teniry.Cqrs.Queries;
using Teniry.Cqrs.Extended.Exceptions;
using Teniry.Cqrs.Extended.Queryables.Page;
using Teniry.Cqrs.Extended.Queryables.Filter;
using Teniry.CrudGenerator.Tests;
using Teniry.CrudGenerator.Tests;
using Mapster;

namespace Teniry.CrudGenerator.Tests.Application.TestEntityFeature.GetTestEntities;
public partial class GetTestEntitiesHandler : IQueryHandler<GetTestEntitiesQuery, TestEntitiesDto>
{
    private readonly TestDb _db;
    public GetTestEntitiesHandler(TestDb db)
    {
        _db = db;
    }

    /// <inheritdoc/>
    public async Task<TestEntitiesDto> HandleAsync(GetTestEntitiesQuery query, CancellationToken cancellation)
    {
        var filter = query.Adapt<GetTestEntitiesFilter>();
        var items = await _db.Set<TestEntity>().Filter(filter).ProjectToType<TestEntitiesListItemDto>().ToPagedListAsync(query, cancellation);
        return new TestEntitiesDto(items.ToList(), items.GetPage());
    }
}
  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a crud generator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using Microsoft.AspNetCore.Mvc;
using Teniry.Cqrs.Queries;
using Teniry.CrudGenerator.Tests.Application.TestEntityFeature.GetTestEntities;

namespace Teniry.CrudGenerator.Tests.Endpoints.TestEntityEndpoints;
public static partial class GetTestEntitiesEndpoint
{
    /// <summary>
    ///     Get Test entities
    /// </summary>
    /// <response code="200">Returns Test entity list</response>
    [ProducesResponseType(typeof(TestEntitiesDto), 200)]
    public static async Task<IResult> GetAsync([AsParameters] GetTestEntitiesQuery query, IQueryDispatcher queryDispatcher, CancellationToken cancellation)
    {
        var result = await queryDispatcher.DispatchAsync<GetTestEntitiesQuery, TestEntitiesDto>(query, cancellation);
        return TypedResults.Ok(result);
    }
}
  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a crud generator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Teniry.CrudGenerator.Tests.Application.TestEntityFeature.CreateTestEntity;
/// <summary>
///     Create Test entity
/// </summary>
/// <returns>Returns id of created entity of type <see cref = "CreatedTestEntityDto"/></returns>
public partial class CreateTestEntityCommand
{
    public string Name { get; set; } = "";
}
  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a crud generator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using Teniry.Cqrs.Commands;
using Teniry.CrudGenerator.Tests;
using Teniry.CrudGenerator.Tests;
using Mapster;

namespace Teniry.CrudGenerator.Tests.Application.TestEntityFeature.CreateTestEntity;
public partial class CreateTestEntityHandler : ICommandHandler<CreateTestEntityCommand, CreatedTestEntityDto>
{
    private readonly TestDb _db;
    public CreateTestEntityHandler(TestDb db)
    {
        _db = db;
    }

    /// <inheritdoc/>
    public async Task<CreatedTestEntityDto> HandleAsync(CreateTestEntityCommand command, CancellationToken cancellation)
    {
        var entity = command.Adapt<TestEntity>();
        await _db.AddAsync(entity, cancellation);
        await _db.SaveChangesAsync(cancellation);
        return new CreatedTestEntityDto(entity.Id);
    }
}
  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a crud generator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Teniry.CrudGenerator.Tests.Application.TestEntityFeature.CreateTestEntity;
public partial class CreatedTestEntityDto
{
    public int Id { get; set; }

    public CreatedTestEntityDto(int id)
    {
        Id = id;
    }
}
  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a crud generator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using Microsoft.AspNetCore.Mvc;
using Teniry.Cqrs.Commands;
using Teniry.CrudGenerator.Tests.Application.TestEntityFeature.CreateTestEntity;

namespace Teniry.CrudGenerator.Tests.Endpoints.TestEntityEndpoints;
public static partial class CreateTestEntityEndpoint
{
    /// <summary>
    ///     Create Test entity
    /// </summary>
    /// <response code="201">New Test entity created</response>
    [ProducesResponseType(201)]
    public static async Task<IResult> CreateAsync(CreateTestEntityCommand command, ICommandDispatcher commandDispatcher, CancellationToken cancellation)
    {
        var result = await commandDispatcher.DispatchAsync<CreateTestEntityCommand, CreatedTestEntityDto>(command, cancellation);
        return TypedResults.Created($"/testEntity/{result.Id}", result);
    }
}
  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a crud generator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using Teniry.Cqrs.Extended.Exceptions;

namespace Teniry.CrudGenerator.Tests.Application.TestEntityFeature.UpdateTestEntity;
/// <summary>
///     Update Test entity
/// </summary>
/// <returns>Nothing</returns>
/// <exception cref = "EntityNotFoundException">When Test entity entity does not exist</exception>
public partial class UpdateTestEntityCommand
{
    public int Id { get; set; }
    public string Name { get; set; } = "";

    public UpdateTestEntityCommand(int id)
    {
        Id = id;
    }
}
  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a crud generator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using Teniry.Cqrs.Commands;
using Teniry.Cqrs.Extended.Exceptions;
using Teniry.CrudGenerator.Tests;
using Teniry.CrudGenerator.Tests;
using Mapster;

namespace Teniry.CrudGenerator.Tests.Application.TestEntityFeature.UpdateTestEntity;
public partial class UpdateTestEntityHandler : ICommandHandler<UpdateTestEntityCommand>
{
    private readonly TestDb _db;
    public UpdateTestEntityHandler(TestDb db)
    {
        _db = db;
    }

    /// <inheritdoc/>
    public async Task HandleAsync(UpdateTestEntityCommand command, CancellationToken cancellation)
    {
        var entity = await _db.FindAsync<TestEntity>(new object[] { command.Id }, cancellation);
        if (entity == null)
        {
            throw new EntityNotFoundException(typeof(TestEntity));
        }

        command.Adapt(entity);
        await _db.SaveChangesAsync(cancellation);
    }
}
  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a crud generator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Teniry.CrudGenerator.Tests.Endpoints.TestEntityEndpoints;
public partial class UpdateTestEntityVm
{
    public string Name { get; set; } = "";
}
  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a crud generator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using Microsoft.AspNetCore.Mvc;
using Teniry.Cqrs.Commands;
using Mapster;
using Teniry.CrudGenerator.Tests.Application.TestEntityFeature.UpdateTestEntity;

namespace Teniry.CrudGenerator.Tests.Endpoints.TestEntityEndpoints;
public static partial class UpdateTestEntityEndpoint
{
    /// <summary>
    ///     Update Test entity
    /// </summary>
    /// <response code="204">Test entity updated</response>
    [ProducesResponseType(204)]
    public static async Task<IResult> UpdateAsync(int id, UpdateTestEntityVm vm, ICommandDispatcher commandDispatcher, CancellationToken cancellation)
    {
        var command = new UpdateTestEntityCommand(id);
        vm.Adapt(command);
        await commandDispatcher.DispatchAsync<UpdateTestEntityCommand>(command, cancellation);
        return TypedResults.NoContent();
    }
}
  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a crud generator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using Teniry.Cqrs.Extended.Exceptions;
using Teniry.Cqrs.Extended.Types.PatchOperationType;

namespace Teniry.CrudGenerator.Tests.Application.TestEntityFeature.PatchTestEntity;
/// <summary>
///     Patch Test entity
/// </summary>
/// <returns>Nothing</returns>
/// <exception cref = "EntityNotFoundException">When Test entity entity does not exist</exception>
public partial class PatchTestEntityCommand
{
    public int Id { get; set; }
    public PatchOp<string>? Name { get; set; }

    public PatchTestEntityCommand(int id)
    {
        Id = id;
    }
}
  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a crud generator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using Teniry.Cqrs.Commands;
using Teniry.Cqrs.Extended.Exceptions;
using Teniry.Cqrs.Extended.Types.PatchOperationType;
using Teniry.CrudGenerator.Tests;
using Teniry.CrudGenerator.Tests;
using Mapster;

namespace Teniry.CrudGenerator.Tests.Application.TestEntityFeature.PatchTestEntity;
public partial class PatchTestEntityHandler : ICommandHandler<PatchTestEntityCommand>
{
    private readonly TestDb _db;
    public PatchTestEntityHandler(TestDb db)
    {
        _db = db;
    }

    /// <inheritdoc/>
    public async Task HandleAsync(PatchTestEntityCommand command, CancellationToken cancellation)
    {
        var entity = await _db.FindAsync<TestEntity>(new object[] { command.Id }, cancellation);
        if (entity == null)
        {
            throw new EntityNotFoundException(typeof(TestEntity));
        }

        PatchOp.Handle(command.Name, nameof(command.Name), x =>
        {
            entity.Name = x;
        });
        await _db.SaveChangesAsync(cancellation);
    }
}
  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a crud generator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using Teniry.Cqrs.Extended.Types.PatchOperationType;

namespace Teniry.CrudGenerator.Tests.Endpoints.TestEntityEndpoints;
public partial class PatchTestEntityVm
{
    public PatchOp<string>? Name { get; set; }
}
  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a crud generator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using Microsoft.AspNetCore.Mvc;
using Teniry.Cqrs.Commands;
using Mapster;
using Teniry.CrudGenerator.Tests.Application.TestEntityFeature.PatchTestEntity;

namespace Teniry.CrudGenerator.Tests.Endpoints.TestEntityEndpoints;
public static partial class PatchTestEntityEndpoint
{
    /// <summary>
    ///     Patch Test entity
    /// </summary>
    /// <response code="204">Test entity updated</response>
    [ProducesResponseType(204)]
    public static async Task<IResult> PatchAsync(int id, PatchTestEntityVm vm, ICommandDispatcher commandDispatcher, CancellationToken cancellation)
    {
        var command = new PatchTestEntityCommand(id);
        vm.Adapt(command);
        await commandDispatcher.DispatchAsync<PatchTestEntityCommand>(command, cancellation);
        return TypedResults.NoContent();
    }
}
  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a crud generator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Teniry.CrudGenerator.Tests.Application.TestEntityFeature.DeleteTestEntity;
/// <summary>
///     Delete Test entity
/// </summary>
/// <returns>Nothing</returns>
public partial class DeleteTestEntityCommand
{
    public int Id { get; set; }

    public DeleteTestEntityCommand(int id)
    {
        Id = id;
    }
}
  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a crud generator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using Teniry.Cqrs.Commands;
using Teniry.CrudGenerator.Tests;
using Teniry.CrudGenerator.Tests;

namespace Teniry.CrudGenerator.Tests.Application.TestEntityFeature.DeleteTestEntity;
public partial class DeleteTestEntityHandler : ICommandHandler<DeleteTestEntityCommand>
{
    private readonly TestDb _db;
    public DeleteTestEntityHandler(TestDb db)
    {
        _db = db;
    }

    /// <inheritdoc/>
    public async Task HandleAsync(DeleteTestEntityCommand command, CancellationToken cancellation)
    {
        var entity = await _db.FindAsync<TestEntity>(new object[] { command.Id }, cancellation);
        if (entity == null)
        {
            return;
        }

        _db.Remove(entity);
        await _db.SaveChangesAsync(cancellation);
    }
}
  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a crud generator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using Microsoft.AspNetCore.Mvc;
using Teniry.Cqrs.Commands;
using Teniry.CrudGenerator.Tests.Application.TestEntityFeature.DeleteTestEntity;

namespace Teniry.CrudGenerator.Tests.Endpoints.TestEntityEndpoints;
public static partial class DeleteTestEntityEndpoint
{
    /// <summary>
    ///     Delete Test entity
    /// </summary>
    /// <response code="204">Test entity deleted</response>
    [ProducesResponseType(204)]
    public static async Task<IResult> DeleteAsync(int id, ICommandDispatcher commandDispatcher, CancellationToken cancellation)
    {
        var command = new DeleteTestEntityCommand(id);
        await commandDispatcher.DispatchAsync<DeleteTestEntityCommand>(command, cancellation);
        return TypedResults.NoContent();
    }
}
  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a crud generator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using Teniry.CrudGenerator.Tests.Endpoints.TestEntityEndpoints;

namespace AutogeneratedEndpoints;
public static class GeneratedEndpointsMapExtension
{
    public static void MapGeneratedEndpoints(this WebApplication app)
    {
        app.MapGet("/testEntity/{id}", GetTestEntityEndpoint.GetAsync).WithTags("Test entity");
        app.MapGet("/testEntity", GetTestEntitiesEndpoint.GetAsync).WithTags("Test entity");
        app.MapPost("/testEntity/create", CreateTestEntityEndpoint.CreateAsync).WithTags("Test entity");
        app.MapPut("/testEntity/{id}/update", UpdateTestEntityEndpoint.UpdateAsync).WithTags("Test entity");
        app.MapPut("/testEntity/{id}/patch", PatchTestEntityEndpoint.PatchAsync).WithTags("Test entity");
        app.MapDelete("/testEntity/{id}/delete", DeleteTestEntityEndpoint.DeleteAsync).WithTags("Test entity");
    }
}
]