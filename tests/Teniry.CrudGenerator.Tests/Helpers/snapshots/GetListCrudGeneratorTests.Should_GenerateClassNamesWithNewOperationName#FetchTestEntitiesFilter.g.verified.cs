//HintName: FetchTestEntitiesFilter.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a crud generator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Linq.Expressions;
using Microsoft.EntityFrameworkCore;
using Teniry.Cqrs.Extended.Queryables.Filter;
using Teniry.CrudGenerator.Tests;

namespace Teniry.CrudGenerator.Tests.Application.TestEntityFeature.FetchTestEntities;
public partial class FetchTestEntitiesFilter : QueryableFilter<TestEntity>
{
    public int[]? Ids { get; set; }
    public string? Name { get; set; }

    /// <inheritdoc/>
    public override Dictionary<string, Expression<Func<TestEntity, object>>> DefineSort()
    {
        return new Dictionary<string, Expression<Func<TestEntity, object>>>
        {
            {
                "id",
                x => x.Id
            },
            {
                "name",
                x => x.Name
            },
        };
    }

    /// <inheritdoc/>
    protected override IQueryable<TestEntity> DefaultSort(IQueryable<TestEntity> query)
    {
        return base.DefaultSort(query);
    }

    /// <inheritdoc/>
    protected override IQueryable<TestEntity> Filter(IQueryable<TestEntity> query)
    {
        if (Ids is not null && Ids.Length > 0)
        {
            query = query.Where(x => Ids.Contains(x.Id));
        }

        if (Name is not null)
        {
            query = query.Where(x => x.Name.ToLower().Contains(Name.ToLower()));
        }

        return query;
    }
}